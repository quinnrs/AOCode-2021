# aoc_template.py

import pathlib

# aoc_template = "materials-advent-of-code/templates/aoc_template.py"
# import aoc_template as aoc

import sys

"""   
The template has separate functions for parsing the input as well as for solving  /
both parts of a puzzle. You donâ€™t need to touch lines 15 to 28 at all. /
They take care of reading text from an input file, calling parse(), 
part1(), and part2(), and then reporting the solutions to the console.

"""

def parse(puzzle_input):
    """Parse input.
        spit string ino 2 points
        then split each point into individual x- and y- coordibates
        then append the 4 points into a line
    """
    lines = []
    for line in puzzle_input.split("\n"):
        point1, point2 = line.split(" -> ")
        x1, y1 = point1.split(",")
        x2, y2 = point2.split(",")
        lines.append((int(x1), int(y1), int(x2), int(y2)))
    return lines    

puzzle_input = ("day5_folder/day5_example.txt")
lines = parse(puzzle_input)


def part1(data):
    """Solve part 1."""
    def points(line):
        """List all points making up a line.
        ## Examples:

        >>> points((0, 3, 3, 3))  # Horizontal line
        [(0, 3), (1, 3), (2, 3), (3, 3)]
        >>> points((3, 4, 3, 0))  # Vertical line
        [(3, 4), (3, 3), (3, 2), (3, 1), (3, 0)]
        """
    def coords(start, stop):
        """List coordinates between start and stop, inclusive."""
        step = 1 if start <= stop else -1
        return range(start, stop + step, step)

    def points(line):
        match line:
            case (x1, y1, x2, y2) if x1 == x2:
                # return [(x1, y) for y in range(y1, y2 + 1)]
                return [(x1, y) for y in coords(y1, y2)]
            case (x1, y1, x2, y2) if y1 == y2:
                # return [(x, y1) for x in range(x1, x2 + 1)]
                return [(x, y1) for x in coords(x1, x2)]





def part2(data):
    """Solve part 2."""

def solve(puzzle_input):
    """Solve the puzzle for the given input."""
    data = parse(puzzle_input)
    solution1 = part1(data)
    solution2 = part2(data)

    return solution1, solution2

if __name__ == "__main__":
    for path in sys.argv[1:]:
        print(f"{path}:")
        puzzle_input = pathlib.Path(path).read_text().strip()
        solutions = solve(puzzle_input)
        print("\n".join(str(solution) for solution in solutions))